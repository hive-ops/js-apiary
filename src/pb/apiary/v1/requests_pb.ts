// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file apiary/v1/requests.proto (package apiary.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
    BinaryReadOptions,
    FieldList,
    JsonReadOptions,
    JsonValue,
    PartialMessage,
    PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Entry } from "./models_pb";

/**
 * @generated from message apiary.v1.GetEntriesRequest
 */
export class GetEntriesRequest extends Message<GetEntriesRequest> {
    /**
     * @generated from field: string keyspace = 1;
     */
    keyspace = "";

    /**
     * @generated from field: repeated string keys = 2;
     */
    keys: string[] = [];

    constructor(data?: PartialMessage<GetEntriesRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "apiary.v1.GetEntriesRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "keyspace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        {
            no: 2,
            name: "keys",
            kind: "scalar",
            T: 9 /* ScalarType.STRING */,
            repeated: true,
        },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEntriesRequest {
        return new GetEntriesRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEntriesRequest {
        return new GetEntriesRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEntriesRequest {
        return new GetEntriesRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: GetEntriesRequest | PlainMessage<GetEntriesRequest> | undefined,
        b: GetEntriesRequest | PlainMessage<GetEntriesRequest> | undefined,
    ): boolean {
        return proto3.util.equals(GetEntriesRequest, a, b);
    }
}

/**
 * @generated from message apiary.v1.SetEntriesRequest
 */
export class SetEntriesRequest extends Message<SetEntriesRequest> {
    /**
     * @generated from field: string keyspace = 1;
     */
    keyspace = "";

    /**
     * @generated from field: repeated apiary.v1.Entry entries = 2;
     */
    entries: Entry[] = [];

    constructor(data?: PartialMessage<SetEntriesRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "apiary.v1.SetEntriesRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "keyspace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "entries", kind: "message", T: Entry, repeated: true },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetEntriesRequest {
        return new SetEntriesRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetEntriesRequest {
        return new SetEntriesRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetEntriesRequest {
        return new SetEntriesRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: SetEntriesRequest | PlainMessage<SetEntriesRequest> | undefined,
        b: SetEntriesRequest | PlainMessage<SetEntriesRequest> | undefined,
    ): boolean {
        return proto3.util.equals(SetEntriesRequest, a, b);
    }
}

/**
 * @generated from message apiary.v1.DeleteEntriesRequest
 */
export class DeleteEntriesRequest extends Message<DeleteEntriesRequest> {
    /**
     * @generated from field: string keyspace = 1;
     */
    keyspace = "";

    /**
     * @generated from field: repeated string keys = 2;
     */
    keys: string[] = [];

    constructor(data?: PartialMessage<DeleteEntriesRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "apiary.v1.DeleteEntriesRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "keyspace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        {
            no: 2,
            name: "keys",
            kind: "scalar",
            T: 9 /* ScalarType.STRING */,
            repeated: true,
        },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEntriesRequest {
        return new DeleteEntriesRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEntriesRequest {
        return new DeleteEntriesRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEntriesRequest {
        return new DeleteEntriesRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: DeleteEntriesRequest | PlainMessage<DeleteEntriesRequest> | undefined,
        b: DeleteEntriesRequest | PlainMessage<DeleteEntriesRequest> | undefined,
    ): boolean {
        return proto3.util.equals(DeleteEntriesRequest, a, b);
    }
}

/**
 * @generated from message apiary.v1.ClearEntriesRequest
 */
export class ClearEntriesRequest extends Message<ClearEntriesRequest> {
    /**
     * @generated from field: string keyspace = 1;
     */
    keyspace = "";

    constructor(data?: PartialMessage<ClearEntriesRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "apiary.v1.ClearEntriesRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "keyspace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClearEntriesRequest {
        return new ClearEntriesRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClearEntriesRequest {
        return new ClearEntriesRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClearEntriesRequest {
        return new ClearEntriesRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: ClearEntriesRequest | PlainMessage<ClearEntriesRequest> | undefined,
        b: ClearEntriesRequest | PlainMessage<ClearEntriesRequest> | undefined,
    ): boolean {
        return proto3.util.equals(ClearEntriesRequest, a, b);
    }
}
